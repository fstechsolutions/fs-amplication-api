datasource postgres {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  addresses Address[]
  createdAt DateTime  @default(now())
  email     String    @unique
  favorites Product[]
  firstName String?
  id        String    @id @default(cuid())
  lastName  String?
  orders    Order[]
  password  String
  phone     String?
  profiles  Profile[]
  reviews   Review[]
  roles     Json
  updatedAt DateTime  @updatedAt
  username  String    @unique
}

model Product {
  createdAt                DateTime @default(now())
  description              String?
  id                       String   @id @default(cuid())
  images                   Json?
  menuName                 String?
  name                     String   @unique
  nutrients                String?
  order                    Order?   @relation(fields: [orderId], references: [id])
  orderId                  String?
  price                    Float
  productType              String
  reviews                  Review?
  sku                      String?  @unique
  slug                     String   @unique
  stripeBuyNowLink         String?  @unique
  stripeBuyNowLinkTestLink String?
  stripeProdId             String?  @unique
  stripeTestId             String?  @unique
  summary                  String?
  tags                     String?
  thumbnail                String?
  updatedAt                DateTime @updatedAt
  users                    User?    @relation(fields: [usersId], references: [id])
  usersId                  String?
  variants                 Json?
}

model Review {
  createdAt       DateTime @default(now())
  fullReview      String
  id              String   @id @default(cuid())
  numStars        Int
  productName     Product  @relation(fields: [name], references: [id])
  name            String   @unique
  summary         String
  totalNumReviews Int?
  updatedAt       DateTime @updatedAt
  user            User?    @relation(fields: [userId], references: [id])
  userId          String?
  videoUrl        String?
}

model Profile {
  avatar            String?
  city              String?
  createdAt         DateTime @default(now())
  id                String   @id @default(cuid())
  publicDisplayName String
  publicUserInfo    String?
  state             String?
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @unique
}

model Order {
  createdAt      DateTime        @default(now())
  deliveryCharge Float?
  discount       String?
  id             String          @id @default(cuid())
  notes          String?
  products       Product[]
  status         EnumOrderStatus
  total          Float?
  updatedAt      DateTime        @updatedAt
  user           User?           @relation(fields: [userId], references: [id])
  userId         String?
}

model Address {
  addressType EnumAddressAddressType?
  city        String?
  createdAt   DateTime                @default(now())
  id          String                  @id @default(cuid())
  postalCode  String?
  state       String?
  street      String
  street2     String?
  updatedAt   DateTime                @updatedAt
  user        User                    @relation(fields: [ID], references: [id])
  ID          String                  @unique
}

enum EnumOrderStatus {
  Inprogress
  Completed
  Cancelled
  Outfordelivery
  Delivered
}

enum EnumAddressAddressType {
  Billing
  Delivery
  Mailing
}
